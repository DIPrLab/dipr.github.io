<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inference Control | DIPr Lab at PSU</title>
    <link>/tag/inference-control/</link>
      <atom:link href="/tag/inference-control/index.xml" rel="self" type="application/rss+xml" />
    <description>Inference Control</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hu0f0a8221e05ad032f2ae11441278135b_1259_512x512_fill_lanczos_center_3.png</url>
      <title>Inference Control</title>
      <link>/tag/inference-control/</link>
    </image>
    
    <item>
      <title>Accord</title>
      <link>/project/accord/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/project/accord/</guid>
      <description>&lt;p&gt;When multiple users  adopt collaborative cloud services like Google Drive to work on a shared resource, incorrect or missing permissions may cause conflicting or inconsistent access  or use privileges. These issues (or conflicts) compromise  resources confidentiality, integrity, or availability leading to a lack of trust in cloud services. An example conflict is when a user with editor permissions  changes the permissions on a shared resource without consent from the original resource owner. In this demonstration, we introduce ACCORD, a web application built on top of Google Drive able to detect and resolve multi-user conflicts. ACCORD employs a simulator to help users preemptively identify potential conflicts and assists them in defining action constraints. Using these constraints, ACCORD can automatically detect and resolve any future conflicts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tattletale</title>
      <link>/project/tattletale/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/project/tattletale/</guid>
      <description>&lt;p&gt;Tattletale uses denial constraints to discovery data inferences inside of a database relative to sensitive cells.  The cells that make up the denial constraints are then checked to see which cells infer information on them.  In the end all the cells that infer data on the sensitive cells and the cells that could be used to reconstruct those inferences are placed into a list which is used to generate a view that does not contain those cells.  Since inference can only be reconstructed as long as only one predicate is missing we can use that to minimize how many cells we have to hide.  The benefit of Tattletale is that it provides protection against inference which access control lists don&amp;rsquo;t provide.  The current challenge is trying to improve the run time performance and decrease the number of cells that have to be hidden while also guaranteeing a certain level of protection against reconstruction.Tattletale uses denial constraints to discovery data inferences inside of a database relative to sensitive cells.  The cells that make up the denial constraints are then checked to see which cells infer information on them.  In the end all the cells that infer data on the sensitive cells and the cells that could be used to reconstruct those inferences are placed into a list which is used to generate a view that does not contain those cells.  Since inference can only be reconstructed as long as only one predicate is missing we can use that to minimize how many cells we have to hide.  The benefit of Tattletale is that it provides protection against inference which access control lists don&amp;rsquo;t provide.  The current challenge is trying to improve the run time performance and decrease the number of cells that have to be hidden while also guaranteeing a certain level of protection against reconstruction.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
